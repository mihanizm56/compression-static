{"version":3,"sources":["services/redux/root-modules/notifications/index.ts","services/redux/root-modules/redirect-manager-module/index.ts","services/redux/root-modules/ui-module/actions.ts","services/redux/root-modules/ui-module/selectors.ts","services/redux/root-modules/ui-module/constants.ts","services/redux/root-modules/ui-module/reducer.ts","services/redux/root-modules/ui-module/index.ts","services/redux/root-modules/request-extra-data-handler-module/index.ts","services/redux/root-modules/notifications/actions.ts","services/redux/root-modules/form-manager-module/actions.ts","services/redux/root-modules/request-extra-data-handler-module/actions.ts","services/redux/root-modules/redirect-manager-module/actions.ts","services/redux/root-modules/init-load-manager-module/actions.ts","_components/text/index.tsx","services/redux/_constants.ts","services/redux/root-modules/notifications/selectors.ts","services/redux/root-modules/notifications/reducer.ts","services/router/components.tsx","services/redux/root-modules/form-manager-module/sagas/form-manager-worker-saga.ts","services/redux/root-modules/form-manager-module/sagas/form-manager-watcher-saga.ts","services/redux/root-modules/form-manager-module/sagas/index.ts","services/redux/root-modules/request-extra-data-handler-module/sagas/request-extra-data-handler-worker-saga.ts","services/redux/root-modules/request-extra-data-handler-module/sagas/request-extra-data-handler-watcher-saga.ts","services/redux/root-modules/request-extra-data-handler-module/sagas/index.ts","services/redux/root-modules/redirect-manager-module/sagas/redirect-manager-worker-saga.ts","services/redux/root-modules/redirect-manager-module/sagas/redirect-manager-watcher-saga.ts","services/redux/root-modules/redirect-manager-module/sagas/index.ts","services/redux/root-modules/init-load-manager-module/sagas/init-load-manager-worker-saga.ts","services/redux/root-modules/init-load-manager-module/sagas/init-load-manager-watcher-saga.ts","services/redux/root-modules/init-load-manager-module/sagas/index.ts","services/redux/root-modules/form-manager-module/index.ts","services/redux/root-modules/init-load-manager-module/index.ts","_components/text/index.module.scss","services/notifications/_components/notification-modal/index.module.scss","services/notifications/index.module.scss","services/redux/_utils/combine-reducers.ts","services/redux/store/root-reducers.ts","_components/portal/index.tsx","services/notifications/_components/notification-icon/notification-icon.tsx","services/notifications/_constants.ts","services/notifications/_components/notification-modal/index.tsx","services/notifications/index.tsx","_components/root-components/index.tsx","_components/app/index.tsx","services/router/_utils.ts","pages/routes.ts","pages/home/route.ts","services/router/dependencies/get-segment-action-result.ts","services/router/dependencies/get-route-action-result.ts","services/router/middlewares/action-handler.ts","services/router/plugins/restore-scroll-position.ts","index.tsx","services/router/index.ts","services/redux/store/index.ts","services/redux/store/create-reducer.ts","services/redux/store/root-saga.ts"],"names":["setAppErrorAction","type","UIStorageSelector","store","getIsAppError","createSelector","pageIsLoadingState","isAppError","initialState","reducer","state","SET_MODAL","setModalAction","actionPayload","payload","id","uniqueId","REMOVE_MODAL","removeModalAction","FETCH_FORM_MANAGER","INIT_REQUEST_HANDLER_ACTION_SAGA","requestExtraDataHandlerActionSaga","REDIRECT_ACTION","redirectManagerSagaAction","INIT_LOAD_MANAGER_ACTION_SAGA","cn","classnames","bind","styles","Text","memo","text","size","color","isBold","isCentered","isUpperCase","classname","className","Boolean","SUCCESSFUL_REQUEST_DEFAULT_MASSAGE","getModalStack","notificationsState","storage","modals","filter","modal","RouteNode","nodeName","children","key","router","route","actionResult","getDependencies","getSegmentActionResult","name","content","formManagerWorkerSaga","resetInitialDataAction","formValues","formRequest","loadingStartAction","loadingStopAction","setErrorAction","setErrorActionsArray","formSuccessAction","formSuccessActionsArray","showNotification","callBackOnSuccess","callBackOnError","requestExtraDataHandlerOptions","formValuesFormatter","responseDataFormatter","withoutFormattingError","redirectSuccessActionParams","redirectErrorActionParams","formatDataToRedirectParamsSuccess","formatDataToRedirectParamsError","put","call","body","translateFunction","i18next","t","isErrorTextStraightToOutput","error","errorText","data","Error","formattedData","length","all","map","successAction","options","status","redirectData","console","message","errorAction","additionalErrors","formManagerWatcherSaga","take","fork","requestExtraDataHandlerWorkerSaga","optionsLength","optionsItem","fieldName","action","optionDataValue","requestExtraDataHandlerWatcherSaga","redirectManagerWorkerSaga","pathName","params","actionAfterRedirect","actionAfterRedirectParams","reload","dispatch","navigate","redirectManagerWatcherSaga","initLoadManagerWorkerSaga","requestConfigList","fullActionLoadingStop","fullActionLoadingStart","counterRequests","resetAction","resetActionsArray","request","requestOptions","requestDataFormatter","actionSuccess","actionsArraySuccess","showSuccessNotification","isDataCritical","errorActionsArray","showErrorNotification","redirectRouteParamsSuccess","redirectRouteParamsError","initLoadManagerWatcherSaga","module","exports","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","getUndefinedStateErrorMessage","actionType","actionDescription","String","combineReducers","reducers","reducerKeys","Object","keys","finalReducers","i","process","shapeAssertionError","finalReducerKeys","forEach","undefined","assertReducerShape","e","hasChanged","nextState","previousStateForKey","nextStateForKey","errorMessage","rootReducers","reducerUIName","UIStateStorage","portalElement","document","getElementById","Portal","props","containerEl","createElement","prefix","appendChild","this","remove","createPortal","PureComponent","NotificationIcon","CheckCircleOutlineSharp","style","ErrorOutlineOutlined","NotificationsModal","closeModal","timeToHold","externalAction","additionalActionType","additionalPayload","notificationModalRef","useRef","useEffect","current","modalComputedStyles","getComputedStyle","modalHeight","Number","getPropertyValue","slice","modalPaddingTop","modalPaddingBottom","documentElement","setProperty","timer","setTimeout","clearTimeout","touchFromX","touchToX","handleCloseClick","useCallback","trackDeltaTouchMove","abs","handleTouchStart","touches","clientX","handleTouchEnd","changedTouches","onTouchStart","onTouchEnd","ref","IconButton","onClick","Close","WrappedContainer","createRef","makeExternalAction","modalStack","TransitionGroup","CSSTransition","timeout","enter","exit","classNames","Component","Notifications","connect","RootComponents","App","isAppNetError","getRoute","segment","routes","startsWithSegment","splitSegment","shift","getActivatedRoutes","toState","fromState","toActivate","transitionPath","includes","push","path","loadAction","segments","nodeSegments","depth","getRouteActionResult","actionHandler","a","actionParams","parentError","getHandler","Promise","resolve","reject","useCache","assign","resolveActionLoad","then","loaded","result","activatedRoutes","reduce","acc","index","arr","newAcc","parallelStack","canParallel","copiedParallelPromises","createPromise","promiseSequential","scrollStateMap","setScrollTop","value","scrollTop","generateScrollStateKey","JSON","stringify","isIgnoreScrollRestore","meta","ignoreScrollRestore","restoreScrollPosition","onTransitionStart","onTransitionSuccess","ROOT_ELEMENT","createRouter","defaultRoute","defaultParams","allowNotFound","caseSensitive","queryParamsMode","setDependencies","useMiddleware","usePlugin","browserPlugin","configureRouter","rootSagas","sagaMiddleware","createSagaMiddleware","composeMiddlewares","batchDispatchMiddleware","enhancers","applyMiddleware","rootReducer","prevState","asyncReducers","createReducer","createStore","enableBatching","rootSagaWithRouter","rootSaga","spawn","values","saga","createRootSaga","asyncSagas","run","createAppStore","start","ReactDOM","render"],"mappings":"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","file":"static/js/main.251f5da1.chunk.js","sourcesContent":["export * from './actions';\nexport * from './selectors';\nexport * from './_types';\nexport { default } from './reducer';\n","export * from './actions';\nexport * from './sagas';\nexport * from './types';\n","import { BaseAction } from '@/services/redux/_types';\n\nexport const START_PAGE_LOADING = 'START_PAGE_LOADING';\nexport const startPageLoadingAction: BaseAction = () => ({\n  type: START_PAGE_LOADING,\n});\n\nexport const STOP_PAGE_LOADING = 'STOP_PAGE_LOADING';\nexport const stopPageLoadingAction: BaseAction = () => ({\n  type: STOP_PAGE_LOADING,\n});\n\nexport const SET_APP_ERROR_STATE = 'SET_APP_ERROR_STATE';\nexport const setAppErrorAction: BaseAction = () => ({\n  type: SET_APP_ERROR_STATE,\n});\n\nexport const REMOVE_APP_ERROR_STATE = 'REMOVE_APP_ERROR_STATE';\nexport const removeAppErrorAction: BaseAction = () => ({\n  type: REMOVE_APP_ERROR_STATE,\n});\n","import { createSelector } from 'reselect';\nimport { IUIState, IUIStatePart } from './types';\nimport { reducerUIName } from './constants';\n\nexport const UIStorageSelector = (store: IUIStatePart) => store[reducerUIName];\n\nexport const getPageIsLoading = createSelector(\n  [UIStorageSelector],\n  ({ pageIsLoadingState }: IUIState) => pageIsLoadingState,\n);\n\nexport const getIsAppError = createSelector(\n  [UIStorageSelector],\n  ({ isAppError }: IUIState) => isAppError,\n);\n","export const reducerUIName = '@redux-core-modules/ui-state';\n","import {\n  START_PAGE_LOADING,\n  STOP_PAGE_LOADING,\n  SET_APP_ERROR_STATE,\n  REMOVE_APP_ERROR_STATE,\n} from './actions';\nimport { IUIState } from './types';\n\nconst initialState: IUIState = {\n  pageIsLoadingState: false,\n  isAppError: false,\n};\n\ntype ActionsType = {\n  type: string;\n};\n\nconst reducer = (\n  state: IUIState = initialState,\n  { type }: ActionsType,\n): IUIState => {\n  switch (type) {\n    case START_PAGE_LOADING:\n      return { ...state, pageIsLoadingState: true };\n    case STOP_PAGE_LOADING:\n      return { ...state, pageIsLoadingState: false };\n    case SET_APP_ERROR_STATE:\n      return { ...state, isAppError: true };\n    case REMOVE_APP_ERROR_STATE:\n      return { ...state, isAppError: false };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export * from './actions';\nexport * from './selectors';\nexport * from './constants';\nexport * from './types';\nexport { default } from './reducer';\n","export * from './actions';\nexport * from './sagas';\nexport * from './types';\n","import { uniqueId } from 'lodash-es';\nimport { Action } from '@/services/redux/_types';\nimport { NotificationType } from './_types';\n\nexport const SET_MODAL = 'SET_MODAL';\nexport const setModalAction: Action<\n  Omit<NotificationType, 'id'>\n> = actionPayload => ({\n  type: SET_MODAL,\n  payload: {\n    ...actionPayload,\n    id: uniqueId('notification_'),\n  },\n});\n\nexport const REMOVE_MODAL = 'REMOVE_MODAL';\nexport const removeModalAction: Action<string> = payload => ({\n  type: REMOVE_MODAL,\n  payload,\n});\n","import { Action } from '@/services/redux/_types';\nimport { FormManagerType } from './types';\n\nexport const FETCH_FORM_MANAGER = 'FETCH_FORM_MANAGER';\nexport const fetchFormManagerSagaAction: Action<FormManagerType> = (\n  payload: FormManagerType,\n) => ({\n  type: FETCH_FORM_MANAGER,\n  payload,\n});\n","import { Action } from '@/services/redux/_types';\nimport { RequestExtraDataHandlerActionSagaType } from './types';\n\nexport const INIT_REQUEST_HANDLER_ACTION_SAGA =\n  'INIT_REQUEST_HANDLER_ACTION_SAGA';\nexport const requestExtraDataHandlerActionSaga: Action<\n  RequestExtraDataHandlerActionSagaType\n> = payload => ({\n  type: INIT_REQUEST_HANDLER_ACTION_SAGA,\n  payload,\n});\n","import { Action } from '@/services/redux/_types';\nimport { IRedirectManagerPayload } from './types';\n\nexport const REDIRECT_ACTION = 'REDIRECT_ACTION';\nexport const redirectManagerSagaAction: Action<IRedirectManagerPayload> = (\n  payload: IRedirectManagerPayload,\n) => ({\n  type: REDIRECT_ACTION,\n  payload,\n});\n\nexport const REDIRECT_ACTION_PLATFORM = 'REDIRECT_ACTION';\nexport const redirectToPlatformRouteManagerSagaAction: Action<\n  IRedirectManagerPayload\n> = (payload: IRedirectManagerPayload) => ({\n  type: REDIRECT_ACTION,\n  payload,\n});\n","import { Action } from '@/services/redux/_types';\r\nimport { InitLoadManagerActionPayloadType } from './types';\r\n\r\nexport const INIT_LOAD_MANAGER_ACTION_SAGA = 'INIT_LOAD_MANAGER_ACTION_SAGA';\r\nexport const initLoadManagerActionSaga: Action<\r\n  InitLoadManagerActionPayloadType\r\n> = payload => ({ type: INIT_LOAD_MANAGER_ACTION_SAGA, payload });\r\n","import React, { Props, memo } from 'react';\nimport classnames from 'classnames/bind';\nimport styles from './index.module.scss';\n\nconst cn = classnames.bind(styles);\n\ntype PropsType = {\n  text: string;\n  size: FontSizeType;\n  color: FontColorType;\n  isBold?: boolean;\n  isCentered?: boolean;\n  isUpperCase?: boolean;\n  classname?: string;\n} & Props<any>;\n\nexport type FontSizeType =\n  | 'h0'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h1-mobile'\n  | 'h2-mobile'\n  | 'h3-mobile'\n  | 'h4-mobile'\n  | 'h5-mobile';\nexport type FontColorType =\n  | 'Orange'\n  | 'DarkPurple'\n  | 'Purple'\n  | 'SuperDuperLightPurple'\n  | 'Red'\n  | 'LightRed'\n  | 'LightYellow'\n  | 'LightBlue'\n  | 'Black'\n  | 'White'\n  | 'RichGrey'\n  | 'Grey'\n  | 'LightGrey'\n  | 'SuccessTextColor';\n\nexport const Text = memo(\n  ({\n    text,\n    size,\n    color,\n    isBold,\n    isCentered,\n    isUpperCase,\n    classname,\n  }: PropsType) => (\n    <span\n      className={cn('text', {\n        [`size-${size}`]: Boolean(size),\n        [`color-${color}`]: Boolean(color),\n        isBold,\n        isCentered,\n        isUpperCase,\n        [classname]: Boolean(classname),\n      })}\n    >\n      {text}\n    </span>\n  ),\n);\n","export const SUCCESSFUL_REQUEST_DEFAULT_MASSAGE = 'data-successfully-sent';\n","import { createSelector } from 'reselect';\nimport { INotificationsStoragePart, INotificationsStorage } from './_types';\n\nconst modalStorageSelector = (store: INotificationsStoragePart) =>\n  store.notificationsState;\n\nexport const getModalStack = createSelector(\n  [modalStorageSelector],\n  (storage: INotificationsStorage) => (storage ? storage.modals : []),\n);\n","import { INotificationsStorage } from './_types';\nimport { SET_MODAL, REMOVE_MODAL } from './actions';\n\nconst initialState: INotificationsStorage = {\n  modals: [],\n};\n\nconst reducer = (\n  state: INotificationsStorage = initialState,\n  { type, payload }: any,\n) => {\n  switch (type) {\n    case SET_MODAL:\n      return {\n        ...state,\n        modals: [...state.modals, payload],\n      };\n\n    case REMOVE_MODAL:\n      return {\n        ...state,\n        modals: state.modals.filter(modal => modal.id !== payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React, { ReactNode } from 'react';\r\nimport { Router, Route } from 'router5';\r\nimport { RouteNode as Router5RouteNode } from 'react-router5';\r\nimport { IActionResult } from './_types';\r\n\r\ninterface IChildrenProps {\r\n  router: Router;\r\n  route: Route;\r\n  content: IActionResult;\r\n}\r\n\r\ninterface IProps extends React.Props<any> {\r\n  nodeName: string;\r\n  children: (params: IChildrenProps) => ReactNode;\r\n}\r\n\r\n/**\r\n * Wrapped RouteNode from router5\r\n */\r\nexport const RouteNode = ({ nodeName, children }: IProps) => (\r\n  <Router5RouteNode key={nodeName} nodeName={nodeName}>\r\n    {({ router, route }: { router: Router; route: Route }) => {\r\n      const DI = router.getDependencies();\r\n      const actionResult = DI.getSegmentActionResult(route.name, nodeName);\r\n\r\n      return children({\r\n        router,\r\n        route,\r\n        content: actionResult && actionResult.content,\r\n      });\r\n    }}\r\n  </Router5RouteNode>\r\n);\r\n","import { put, all, call } from 'redux-saga/effects';\r\nimport i18next from 'i18next';\r\nimport { setModalAction } from '@/services/redux/root-modules/notifications';\r\nimport { requestExtraDataHandlerActionSaga } from '@/services/redux/root-modules/request-extra-data-handler-module';\r\nimport {\r\n  redirectManagerSagaAction,\r\n  IRedirectManagerPayload,\r\n} from '@/services/redux/root-modules/redirect-manager-module';\r\nimport { SUCCESSFUL_REQUEST_DEFAULT_MASSAGE } from '@/services/redux/_constants';\r\nimport { FormManagerType } from '../types';\r\n\r\ninterface IFormManagerWorkerParams {\r\n  payload: FormManagerType;\r\n}\r\n\r\nexport function* formManagerWorkerSaga({\r\n  payload: {\r\n    resetInitialDataAction,\r\n    formValues,\r\n    formRequest,\r\n    loadingStartAction,\r\n    loadingStopAction,\r\n    setErrorAction,\r\n    setErrorActionsArray,\r\n    formSuccessAction,\r\n    formSuccessActionsArray,\r\n    showNotification,\r\n    callBackOnSuccess,\r\n    callBackOnError,\r\n    requestExtraDataHandlerOptions,\r\n    formValuesFormatter,\r\n    responseDataFormatter,\r\n    withoutFormattingError,\r\n    redirectSuccessActionParams,\r\n    redirectErrorActionParams,\r\n    formatDataToRedirectParamsSuccess,\r\n    formatDataToRedirectParamsError,\r\n  },\r\n}: IFormManagerWorkerParams) {\r\n  // set new \"initial\" form data - react-final-form needs because if rerender form - \"initial\" values will be from the very beginning\r\n  if (resetInitialDataAction) {\r\n    yield put(resetInitialDataAction(formValues));\r\n  }\r\n\r\n  yield put(loadingStartAction());\r\n\r\n  try {\r\n    const { error, errorText, data } = yield call(formRequest, {\r\n      body: formValuesFormatter ? formValuesFormatter(formValues) : formValues,\r\n      translateFunction: i18next.t.bind(i18next),\r\n      isErrorTextStraightToOutput: withoutFormattingError,\r\n    });\r\n\r\n    if (error) {\r\n      throw new Error(errorText);\r\n    }\r\n\r\n    // put usual function callback\r\n    if (callBackOnSuccess) {\r\n      yield callBackOnSuccess();\r\n    }\r\n\r\n    // format data\r\n    const formattedData = responseDataFormatter\r\n      ? responseDataFormatter(data)\r\n      : data;\r\n\r\n    // dispatch success actions\r\n    if (formSuccessAction) {\r\n      yield put(formSuccessAction(formattedData));\r\n    } else if (formSuccessActionsArray && formSuccessActionsArray.length) {\r\n      yield all(\r\n        formSuccessActionsArray.map(successAction =>\r\n          put(successAction(formattedData)),\r\n        ),\r\n      );\r\n    }\r\n\r\n    // custom data redux actions in one middleware\r\n    if (requestExtraDataHandlerOptions) {\r\n      yield put(\r\n        requestExtraDataHandlerActionSaga({\r\n          data: formattedData,\r\n          options: requestExtraDataHandlerOptions,\r\n        }),\r\n      );\r\n    }\r\n\r\n    // trigger success notification\r\n    if (showNotification) {\r\n      yield put(\r\n        setModalAction({\r\n          status: 'success',\r\n          text: i18next.t(SUCCESSFUL_REQUEST_DEFAULT_MASSAGE),\r\n        }),\r\n      );\r\n    }\r\n\r\n    // handle success redirect\r\n    if (redirectSuccessActionParams) {\r\n      const redirectData: IRedirectManagerPayload = formatDataToRedirectParamsSuccess\r\n        ? formatDataToRedirectParamsSuccess({\r\n            ...redirectSuccessActionParams,\r\n            ...formattedData,\r\n          })\r\n        : redirectSuccessActionParams;\r\n\r\n      yield put(redirectManagerSagaAction(redirectData));\r\n    }\r\n  } catch (error) {\r\n    console.error('error in formRequest', error.message);\r\n\r\n    // put usual function callback\r\n    if (callBackOnError) {\r\n      yield callBackOnError();\r\n    }\r\n\r\n    // dispatch fail actions\r\n    if (setErrorAction) {\r\n      yield put(setErrorAction(error.message));\r\n    } else if (setErrorActionsArray && setErrorActionsArray.length) {\r\n      yield all(\r\n        setErrorActionsArray.map(errorAction =>\r\n          put(errorAction(error.message)),\r\n        ), // eslint-disable-line\r\n      );\r\n    }\r\n\r\n    // trigger notification\r\n    if (showNotification) {\r\n      yield put(\r\n        setModalAction({\r\n          status: 'error',\r\n          text: error.message,\r\n        }),\r\n      );\r\n    }\r\n\r\n    if (redirectErrorActionParams) {\r\n      yield put(redirectManagerSagaAction(redirectErrorActionParams));\r\n    }\r\n\r\n    // handle error redirect\r\n    if (redirectErrorActionParams) {\r\n      const redirectData: IRedirectManagerPayload = formatDataToRedirectParamsError\r\n        ? formatDataToRedirectParamsError({\r\n            ...redirectErrorActionParams,\r\n            ...error.additionalErrors,\r\n          })\r\n        : redirectErrorActionParams;\r\n\r\n      yield put(redirectManagerSagaAction(redirectData));\r\n    }\r\n  } finally {\r\n    yield put(loadingStopAction());\r\n  }\r\n}\r\n","import { take, fork } from 'redux-saga/effects';\nimport { FETCH_FORM_MANAGER } from '../actions';\nimport { FormManagerType } from '../types';\nimport { formManagerWorkerSaga } from './form-manager-worker-saga';\n\nexport function* formManagerWatcherSaga() {\n  while (true) {\n    const { payload }: { payload: FormManagerType } = yield take(\n      FETCH_FORM_MANAGER,\n    );\n\n    yield fork(formManagerWorkerSaga, { payload });\n  }\n}\n","export * from './form-manager-worker-saga';\nexport * from './form-manager-watcher-saga';\n","import { put } from 'redux-saga/effects';\r\nimport { InitRequestHandlerActionType } from '../types';\r\n\r\ntype ParamsType = {\r\n  data: any; // 'cause we can have various types of data\r\n  options: InitRequestHandlerActionType;\r\n};\r\n\r\nexport function* requestExtraDataHandlerWorkerSaga({\r\n  data,\r\n  options,\r\n}: ParamsType) {\r\n  try {\r\n    const optionsLength = options.length;\r\n\r\n    let optionsItem = 0;\r\n\r\n    while (optionsItem < optionsLength) {\r\n      const { fieldName, action } = options[optionsItem];\r\n      const optionDataValue = data[fieldName];\r\n\r\n      yield put(action(optionDataValue));\r\n\r\n      optionsItem += 1;\r\n    }\r\n  } catch (error) {\r\n    console.error(\r\n      'requestExtraDataHandlerWorkerSaga catch error',\r\n      error.message,\r\n    );\r\n  }\r\n}\r\n","import { take, fork } from 'redux-saga/effects';\nimport { INIT_REQUEST_HANDLER_ACTION_SAGA } from '../actions';\nimport { requestExtraDataHandlerWorkerSaga } from './request-extra-data-handler-worker-saga';\n\nexport function* requestExtraDataHandlerWatcherSaga() {\n  while (true) {\n    const { payload } = yield take(INIT_REQUEST_HANDLER_ACTION_SAGA);\n\n    yield fork(requestExtraDataHandlerWorkerSaga, payload);\n  }\n}\n","export * from './request-extra-data-handler-worker-saga';\nexport * from './request-extra-data-handler-watcher-saga';\n","import { Router } from 'router5';\nimport { Dispatch } from 'redux';\nimport { BaseAction } from '@/services/redux/_types';\nimport { IRedirectManagerPayload } from '../types';\n\ninterface IFormManagerWorkerParams {\n  payload: IRedirectManagerPayload;\n  router: Router;\n  dispatch: Dispatch;\n}\n\nexport function* redirectManagerWorkerSaga({\n  payload: {\n    pathName,\n    params,\n    actionAfterRedirect,\n    actionAfterRedirectParams,\n    reload,\n  },\n  router,\n  dispatch,\n}: IFormManagerWorkerParams) {\n  try {\n    yield router.navigate(pathName, params, { reload: Boolean(reload) }, () => {\n      if (actionAfterRedirect) {\n        // cast type to dispatch in BaseAction style\n        const action: BaseAction = actionAfterRedirectParams\n          ? (actionAfterRedirect.bind(null, {\n              ...actionAfterRedirectParams,\n            }) as BaseAction)\n          : (actionAfterRedirect as BaseAction);\n\n        dispatch(action());\n      }\n    });\n  } catch (error) {\n    console.error('redirectManagerWorkerSaga catch error', error.message);\n  }\n}\n","import { take, fork } from 'redux-saga/effects';\nimport { Router } from 'router5';\nimport { REDIRECT_ACTION } from '../actions';\nimport { IRedirectManagerPayload } from '../types';\nimport { redirectManagerWorkerSaga } from './redirect-manager-worker-saga';\n\nexport function* redirectManagerWatcherSaga({\n  router,\n  dispatch,\n}: {\n  router: Router;\n  dispatch: any;\n}) {\n  while (true) {\n    const { payload }: { payload: IRedirectManagerPayload } = yield take(\n      REDIRECT_ACTION,\n    );\n\n    yield fork(redirectManagerWorkerSaga, { payload, router, dispatch });\n  }\n}\n","export * from './redirect-manager-watcher-saga';\nexport * from './redirect-manager-worker-saga';\n","import { put, call, all } from 'redux-saga/effects';\r\nimport i18next from 'i18next';\r\nimport { setModalAction } from '@/services/redux/root-modules/notifications';\r\nimport { setAppErrorAction } from '@/services/redux/root-modules/ui-module';\r\nimport { requestExtraDataHandlerActionSaga } from '@/services/redux/root-modules/request-extra-data-handler-module';\r\nimport {\r\n  redirectManagerSagaAction,\r\n  IRedirectManagerPayload,\r\n} from '@/services/redux/root-modules/redirect-manager-module';\r\nimport { SUCCESSFUL_REQUEST_DEFAULT_MASSAGE } from '@/services/redux/_constants';\r\nimport { InitLoadManagerActionPayloadType } from '../types';\r\n\r\nexport function* initLoadManagerWorkerSaga({\r\n  payload: {\r\n    requestConfigList,\r\n    options: { fullActionLoadingStop, fullActionLoadingStart } = {},\r\n  },\r\n}: {\r\n  payload: InitLoadManagerActionPayloadType;\r\n}) {\r\n  let counterRequests = 0;\r\n\r\n  if (fullActionLoadingStart) {\r\n    yield put(fullActionLoadingStart());\r\n  }\r\n\r\n  while (counterRequests < requestConfigList.length) {\r\n    const {\r\n      resetAction,\r\n      resetActionsArray,\r\n      request,\r\n      requestOptions,\r\n      requestDataFormatter,\r\n      actionSuccess,\r\n      actionsArraySuccess,\r\n      requestExtraDataHandlerOptions,\r\n      showSuccessNotification,\r\n      isDataCritical,\r\n      errorAction,\r\n      errorActionsArray,\r\n      showErrorNotification,\r\n      loadingStopAction,\r\n      loadingStartAction,\r\n      withoutFormattingError,\r\n      formatDataToRedirectParamsSuccess,\r\n      redirectRouteParamsSuccess,\r\n      formatDataToRedirectParamsError,\r\n      redirectRouteParamsError,\r\n    } = requestConfigList[counterRequests];\r\n\r\n    try {\r\n      // reset actions\r\n      if (resetAction) {\r\n        yield put(resetAction());\r\n      } else if (resetActionsArray) {\r\n        yield all(resetActionsArray.map(action => put(action())));\r\n      }\r\n\r\n      if (loadingStartAction) {\r\n        yield put(loadingStartAction());\r\n      }\r\n\r\n      // make the request with language dictionary (optionally with params)\r\n      const { error, errorText, data, additionalErrors } = yield call(request, {\r\n        ...requestOptions,\r\n        translateFunction: i18next.t.bind(i18next),\r\n        isErrorTextStraightToOutput: withoutFormattingError,\r\n      });\r\n\r\n      // if an error in request\r\n      if (error) {\r\n        // eslint-disable-next-line\r\n        throw { message: errorText, additionalErrors };\r\n      }\r\n\r\n      // format data\r\n      const formattedData = requestDataFormatter\r\n        ? requestDataFormatter(data)\r\n        : data;\r\n\r\n      // success actions\r\n      if (actionSuccess && formattedData) {\r\n        yield put(actionSuccess(formattedData));\r\n      } else if (actionsArraySuccess) {\r\n        yield all(\r\n          actionsArraySuccess.map(action => put(action(formattedData))),\r\n        );\r\n      }\r\n\r\n      // custom data redux actions in one middleware\r\n      if (requestExtraDataHandlerOptions) {\r\n        yield put(\r\n          requestExtraDataHandlerActionSaga({\r\n            data: formattedData,\r\n            options: requestExtraDataHandlerOptions,\r\n          }),\r\n        );\r\n      }\r\n\r\n      // set success notification\r\n      if (showSuccessNotification) {\r\n        yield put(\r\n          setModalAction({\r\n            status: 'error',\r\n            text: i18next.t(SUCCESSFUL_REQUEST_DEFAULT_MASSAGE),\r\n          }),\r\n        );\r\n      }\r\n\r\n      // handle success redirect\r\n      if (redirectRouteParamsSuccess) {\r\n        const redirectData: IRedirectManagerPayload = formatDataToRedirectParamsSuccess\r\n          ? formatDataToRedirectParamsSuccess({\r\n              ...redirectRouteParamsSuccess,\r\n              ...data,\r\n            })\r\n          : redirectRouteParamsSuccess;\r\n\r\n        yield put(redirectManagerSagaAction(redirectData));\r\n      }\r\n    } catch (error) {\r\n      console.error('error in initLoadManagerWorkerSaga', error.message);\r\n\r\n      // if data in request is critical and we dont get it -> set app global error\r\n      if (isDataCritical) {\r\n        console.error('error', 'get is critical fetch fail');\r\n\r\n        yield put(setAppErrorAction());\r\n        break;\r\n      }\r\n\r\n      // set error actions\r\n      if (errorAction) {\r\n        yield put(errorAction(error.message));\r\n      } else if (errorActionsArray) {\r\n        yield all(errorActionsArray.map(action => put(action(error.message))));\r\n      }\r\n\r\n      // set error notification\r\n      if (showErrorNotification) {\r\n        yield put(\r\n          setModalAction({\r\n            status: 'error',\r\n            text: error.message,\r\n          }),\r\n        );\r\n      }\r\n\r\n      // handle error redirect\r\n      if (redirectRouteParamsError) {\r\n        const redirectData: IRedirectManagerPayload = formatDataToRedirectParamsError\r\n          ? formatDataToRedirectParamsError({\r\n              ...redirectRouteParamsError,\r\n              ...error.additionalErrors,\r\n            })\r\n          : redirectRouteParamsError;\r\n\r\n        yield put(redirectManagerSagaAction(redirectData));\r\n      }\r\n    } finally {\r\n      if (loadingStopAction) {\r\n        yield put(loadingStopAction());\r\n      }\r\n    }\r\n\r\n    // go to next request\r\n    counterRequests += 1;\r\n  }\r\n\r\n  if (fullActionLoadingStop) {\r\n    yield put(fullActionLoadingStop());\r\n  }\r\n}\r\n","import { take, fork } from 'redux-saga/effects';\r\nimport { INIT_LOAD_MANAGER_ACTION_SAGA } from '../actions';\r\nimport { InitLoadManagerActionPayloadType } from '../types';\r\nimport { initLoadManagerWorkerSaga } from './init-load-manager-worker-saga';\r\n\r\nexport function* initLoadManagerWatcherSaga() {\r\n  while (true) {\r\n    const {\r\n      payload,\r\n    }: { payload: InitLoadManagerActionPayloadType } = yield take(\r\n      INIT_LOAD_MANAGER_ACTION_SAGA,\r\n    );\r\n\r\n    yield fork(initLoadManagerWorkerSaga, { payload });\r\n  }\r\n}\r\n","export * from './init-load-manager-worker-saga';\r\nexport * from './init-load-manager-watcher-saga';\r\n","export * from './actions';\nexport * from './sagas';\nexport * from './types';\n","export * from './actions';\r\nexport * from './sagas';\r\nexport * from './types';\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"text_text__2kCe-\",\"size-h0\":\"text_size-h0__13raX\",\"size-h1\":\"text_size-h1__1RUH8\",\"size-h2\":\"text_size-h2__2DQ4s\",\"size-h3\":\"text_size-h3__qtFT2\",\"size-h4\":\"text_size-h4__27U0_\",\"size-h5\":\"text_size-h5__1ZQxQ\",\"size-h6\":\"text_size-h6__2m8n3\",\"size-h1-mobile\":\"text_size-h1-mobile__Dj_tt\",\"size-h2-mobile\":\"text_size-h2-mobile__2INks\",\"size-h3-mobile\":\"text_size-h3-mobile__lHkHe\",\"size-h4-mobile\":\"text_size-h4-mobile__Xhu4q\",\"size-h5-mobile\":\"text_size-h5-mobile__29fBW\",\"color-Orange\":\"text_color-Orange__18H5v\",\"color-DarkPurple\":\"text_color-DarkPurple__3G9Ch\",\"color-Purple\":\"text_color-Purple__2Nens\",\"color-SuperDuperLightPurple\":\"text_color-SuperDuperLightPurple__W2_oP\",\"color-Red\":\"text_color-Red__Wrw5S\",\"color-LightRed\":\"text_color-LightRed__3bYEf\",\"color-LightYellow\":\"text_color-LightYellow__37jW7\",\"color-LightBlue\":\"text_color-LightBlue__291m7\",\"color-Black\":\"text_color-Black__34SUE\",\"color-RichGrey\":\"text_color-RichGrey__3gqsa\",\"color-Grey\":\"text_color-Grey__1uaKx\",\"color-LightGrey\":\"text_color-LightGrey__2NRMm\",\"color-White\":\"text_color-White__ZMWS2\",\"isBold\":\"text_isBold__25aYC\",\"isCentered\":\"text_isCentered__39Z-1\",\"isUpperCase\":\"text_isUpperCase__2oXjo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationModal\":\"notification-modal_notificationModal__1CeUd\",\"notificationModalContent\":\"notification-modal_notificationModalContent__3zaMM\",\"iconContainer\":\"notification-modal_iconContainer__3FYjS\",\"textContainer\":\"notification-modal_textContainer__3I1Hu\",\"iconCloseButton\":\"notification-modal_iconCloseButton__2Tdjf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationModalsTransitionGroup\":\"notifications_notificationModalsTransitionGroup__zTXmW\",\"modalAnimationBox-enter\":\"notifications_modalAnimationBox-enter__2-pZ7\",\"fadeInBubble\":\"notifications_fadeInBubble__35EFD\",\"modalAnimationBox-exit\":\"notifications_modalAnimationBox-exit__2Otim\",\"fadeOutBubble\":\"notifications_fadeOutBubble__3NZhL\",\"modalAnimationBox\":\"notifications_modalAnimationBox__3BioS\"};","import {\n  ReducersMapObject,\n  AnyAction,\n  Action,\n  StateFromReducersMapObject,\n} from 'redux';\n\nconst randomString = () =>\n  Math.random()\n    .toString(36)\n    .substring(7)\n    .split('')\n    .join('.');\n\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */ randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */ randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`,\n};\n\nfunction getUndefinedStateErrorMessage(key: string, action: Action) {\n  const actionType = action && action.type;\n  const actionDescription =\n    (actionType && `action \"${String(actionType)}\"`) || 'an action';\n\n  return (\n    `Given ${actionDescription}, reducer \"${key}\" returned undefined. ` +\n    'To ignore an action, you must explicitly return the previous state. ' +\n    'If you want this reducer to hold no value, you can return null instead of undefined.'\n  );\n}\n\nfunction assertReducerShape(reducers: ReducersMapObject) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key];\n    const initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined during initialization. ` +\n        'If the state passed to the reducer is undefined, you must ' +\n        'explicitly return the initial state. The initial state may ' +\n          'not be undefined. If you don\\'t want to set a value for this reducer, ' + // eslint-disable-line\n          'you can use null instead of undefined.',\n      );\n    }\n\n    if (\n      typeof reducer(undefined, {\n        type: ActionTypes.PROBE_UNKNOWN_ACTION(),\n      }) === 'undefined'\n    ) {\n      throw new Error(\n        `Reducer \"${key}\" returned undefined when probed with a random type. ` +\n          `Don't try to handle ${ActionTypes.INIT} or other actions in \"redux/*\" ` +\n          'namespace. They are considered private. Instead, you must return the ' +\n          'current state for any unknown actions, unless it is undefined, ' +\n          'in which case you must return the initial state, regardless of the ' +\n          'action type. The initial state may not be undefined, but can be null.',\n      );\n    }\n  });\n}\n\n// default combineReducers from redux but without warning about reducers keys !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\nexport function combineReducers(reducers: ReducersMapObject) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers: ReducersMapObject = {};\n  // eslint-disable-next-line\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        console.error(`No reducer provided for key \"${key}\"`);\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  let shapeAssertionError: Error;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(\n    state: StateFromReducersMapObject<typeof reducers> = {},\n    action: AnyAction,\n  ) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    let hasChanged = false;\n    const nextState: StateFromReducersMapObject<typeof reducers> = {};\n    // eslint-disable-next-line\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        const errorMessage = getUndefinedStateErrorMessage(key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    hasChanged =\n      hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n","import notificationsState from '@/services/redux/root-modules/notifications';\nimport UIStateStorage, {\n  reducerUIName,\n} from '@/services/redux/root-modules/ui-module';\n\nexport const rootReducers = {\n  notificationsState,\n  [reducerUIName]: UIStateStorage,\n};\n","import React, { PureComponent, Props } from 'react';\nimport { uniqueId } from 'lodash-es';\nimport { createPortal } from 'react-dom';\n\nconst portalElement = document.getElementById('portal');\n\ninterface IProps extends Props<any> {\n  children: React.ReactNode;\n  prefix: string;\n}\n\nexport class Portal extends PureComponent<IProps> {\n  containerEl: HTMLElement;\n\n  constructor(props: any) {\n    super(props);\n\n    this.containerEl = document.createElement('div');\n    this.containerEl.id = `${props.prefix}_${uniqueId('portal_')}`;\n    portalElement.appendChild(this.containerEl);\n  }\n\n  componentWillUnmount() {\n    this.containerEl.remove();\n  }\n\n  render() {\n    return createPortal(this.props.children, this.containerEl);\n  }\n}\n","import React, { memo } from 'react';\nimport {\n  ErrorOutlineOutlined,\n  CheckCircleOutlineSharp,\n} from '@material-ui/icons';\nimport { NotificationIconStatusType } from '../../_types';\nimport { SUCCESS_STATUS } from '../../_constants';\n\ntype PropsType = {\n  status: NotificationIconStatusType;\n};\n\nexport const NotificationIcon = memo(({ status }: PropsType) =>\n  status === SUCCESS_STATUS ? (\n    <CheckCircleOutlineSharp style={{ color: '#00C143' }} />\n  ) : (\n    <ErrorOutlineOutlined color=\"error\" />\n  ),\n);\n","export const DEFAULT_SUCCESS_NOTIFICATION_MESSAGE =\n  'Действие выполнено успешно';\n\nexport const DEFAULT_ERROR_NOTIFICATION_MESSAGE = 'Действие не выполнено';\n\nexport const SUCCESS_STATUS = 'success';\nexport const ERROR_STATUS = 'error';\n\nexport const TIME_TO_ENTER_MODAL = 500;\nexport const TIME_TO_EXIT_MODAL = 500;\nexport const TIME_TO_HOLD_MODAL = 10000;\n","import React, {\n  memo,\n  useEffect,\n  TouchEvent,\n  Props,\n  useCallback,\n  useRef,\n} from 'react';\nimport classnames from 'classnames/bind';\nimport { Close } from '@material-ui/icons';\nimport { IconButton } from '@material-ui/core';\nimport { Text } from '@/_components/text';\nimport {\n  IMakeExternalActionParams,\n  NotificationIconStatusType,\n} from '../../_types';\nimport { NotificationIcon } from '../notification-icon/notification-icon';\nimport styles from './index.module.scss';\n\nconst cn = classnames.bind(styles);\n\ntype PropType = {\n  closeModal: (id: string) => void;\n  id: string;\n  text: string;\n  status: NotificationIconStatusType;\n  timeToHold: number;\n  externalAction?: ({\n    id,\n    additionalActionType,\n  }: IMakeExternalActionParams) => void;\n  additionalActionType?: string;\n  additionalPayload?: any; // any because we dont know this type\n} & Props<any>;\n\nexport const NotificationsModal = memo(\n  ({\n    closeModal,\n    id,\n    text,\n    status,\n    timeToHold,\n    externalAction,\n    additionalActionType,\n    additionalPayload,\n  }: PropType) => {\n    const notificationModalRef = useRef(null);\n\n    useEffect(() => {\n      if (Boolean(notificationModalRef.current)) {\n        const modalComputedStyles = getComputedStyle(\n          // eslint-disable-next-line\n          // @ts-ignore\n          notificationModalRef.current,\n        );\n\n        const modalHeight = Number(\n          modalComputedStyles.getPropertyValue('height').slice(0, 2),\n        );\n\n        const modalPaddingTop = Number(\n          modalComputedStyles.getPropertyValue('padding-top').slice(0, 2),\n        );\n\n        const modalPaddingBottom = Number(\n          modalComputedStyles.getPropertyValue('padding-bottom').slice(0, 2),\n        );\n\n        document.documentElement.style.setProperty(\n          '--notification-max-height',\n          `${(modalHeight + modalPaddingTop + modalPaddingBottom) * 2}px`,\n        );\n      }\n\n      const timer = setTimeout(() => closeModal(id), timeToHold);\n      return () => clearTimeout(timer);\n    }, []); //eslint-disable-line\n\n    let touchFromX = 0;\n    let touchToX = 0;\n\n    const handleCloseClick = useCallback(() => {\n      if (additionalActionType && externalAction) {\n        externalAction({ id, additionalActionType, additionalPayload });\n      }\n\n      closeModal(id);\n    }, [\n      additionalPayload,\n      closeModal,\n      externalAction,\n      additionalActionType,\n      id,\n    ]);\n\n    const trackDeltaTouchMove = useCallback(() => {\n      const delta = Math.abs(touchFromX - touchToX);\n\n      if (delta > 60) {\n        handleCloseClick();\n      }\n    }, [handleCloseClick, touchFromX, touchToX]);\n\n    const handleTouchStart = useCallback(({ touches }: TouchEvent) => {\n      touchFromX = touches[0].clientX; //eslint-disable-line\n    }, []);\n\n    const handleTouchEnd = useCallback(({ changedTouches }: TouchEvent) => {\n      touchToX = changedTouches[0].clientX; //eslint-disable-line\n      trackDeltaTouchMove();\n    }, []);\n\n    return (\n      <div\n        className={cn('notificationModal')}\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleTouchEnd}\n        ref={notificationModalRef}\n      >\n        <div className={cn('notificationModalContent')}>\n          <div className={cn('iconContainer')}>\n            <NotificationIcon status={status} />\n          </div>\n          <div className={cn('textContainer')}>\n            <Text text={text} size=\"h2\" color=\"Black\" />\n          </div>\n          <IconButton size=\"small\" onClick={handleCloseClick}>\n            <Close />\n          </IconButton>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { Component, createRef } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames/bind';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n  getModalStack,\n  removeModalAction,\n  NotificationType,\n} from '@/services/redux/root-modules/notifications';\n\nimport {\n  TIME_TO_ENTER_MODAL,\n  TIME_TO_EXIT_MODAL,\n  TIME_TO_HOLD_MODAL,\n} from './_constants';\nimport { IMakeExternalActionParams } from './_types';\nimport { NotificationsModal } from './_components/notification-modal';\nimport styles from './index.module.scss';\n\nconst cn = classnames.bind(styles);\n\ntype PropsType = {\n  dispatch: Dispatch;\n  modalStack: Array<NotificationType>;\n};\n\nexport class WrappedContainer extends Component<PropsType> {\n  notificationModalRef: any = createRef();\n\n  closeModal = (id: string) => {\n    const { dispatch } = this.props;\n\n    dispatch(removeModalAction(id));\n  };\n\n  makeExternalAction = ({\n    id,\n    additionalActionType,\n    additionalPayload,\n  }: IMakeExternalActionParams) => {\n    if (additionalActionType) {\n      this.props.dispatch({\n        type: additionalActionType,\n        payload: { id, ...additionalPayload },\n      });\n    }\n  };\n\n  render() {\n    const { modalStack } = this.props;\n\n    return (\n      <TransitionGroup className={cn('notificationModalsTransitionGroup')}>\n        {modalStack.map(\n          ({ status, text, id, additionalActionType, additionalPayload }) => (\n            <CSSTransition\n              key={id}\n              timeout={{\n                enter: TIME_TO_ENTER_MODAL,\n                exit: TIME_TO_EXIT_MODAL,\n              }}\n              classNames={{\n                enter: cn('modalAnimationBox-enter'),\n                exit: cn('modalAnimationBox-exit'),\n              }}\n            >\n              <div className={cn('modalAnimationBox')}>\n                <NotificationsModal\n                  status={status}\n                  text={text}\n                  key={id}\n                  id={id}\n                  closeModal={this.closeModal}\n                  timeToHold={TIME_TO_HOLD_MODAL}\n                  externalAction={this.makeExternalAction}\n                  additionalActionType={additionalActionType}\n                  additionalPayload={additionalPayload}\n                />\n              </div>\n            </CSSTransition>\n          ),\n        )}\n      </TransitionGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (store: any) => ({ modalStack: getModalStack(store) });\n\nexport const Notifications = connect(mapStateToProps)(WrappedContainer);\n","import React from 'react';\nimport { Portal } from '@/_components/portal';\nimport { Notifications } from '@/services/notifications';\n\nexport const RootComponents = () => (\n  <>\n    <Portal prefix=\"notifications\">\n      <Notifications />\n    </Portal>\n  </>\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Router } from 'router5';\nimport { RouterProvider } from 'react-router5';\nimport { RouteNode } from '@/services/router/components';\nimport { RootComponents } from '@/_components/root-components';\nimport { getIsAppError } from '@/services/redux/root-modules/ui-module';\nimport { Text } from '@/_components/text';\nimport '@/styles/global.css';\nimport '@/styles/variables.module.scss';\n\ntype PropTypes = {\n  router: Router;\n  isAppNetError: boolean;\n};\n\nexport const WrappedViewComponent = ({ router, isAppNetError }: PropTypes) => (\n  <>\n    <RootComponents />\n    <RouterProvider key={1} router={router}>\n      {isAppNetError ? (\n        <Text\n          text=\"Приносим извинения, в приложении произошла ошибка\"\n          size=\"h1\"\n          color=\"Black\"\n        />\n      ) : (\n        <RouteNode nodeName=\"\">{({ content }) => content}</RouteNode>\n      )}\n    </RouterProvider>\n  </>\n);\n\nconst mapStateToProps = state => ({ isAppNetError: getIsAppError(state) });\n\nexport const App = connect(mapStateToProps)(WrappedViewComponent);\n","import { transitionPath, State } from 'router5';\r\nimport { startsWithSegment } from 'router5-helpers';\r\nimport { IAdvancedRoute } from './_types';\r\n\r\nexport const getRoute = (\r\n  segment: string,\r\n  routes: IAdvancedRoute[],\r\n): IAdvancedRoute | never => {\r\n  // eslint-disable-next-line\r\n  for (const route of routes) {\r\n    if (route.name === segment) {\r\n      return route;\r\n    }\r\n\r\n    if (startsWithSegment(segment, route.name) && route.children) {\r\n      const splitSegment = segment.split('.');\r\n      splitSegment.shift();\r\n\r\n      if (splitSegment.length > 0) {\r\n        return getRoute(splitSegment.join('.'), route.children);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('route not found');\r\n};\r\n\r\nexport const getActivatedRoutes = (\r\n  toState: State,\r\n  fromState: State,\r\n  routes: IAdvancedRoute[],\r\n): IAdvancedRoute[] => {\r\n  const { toActivate } = transitionPath(toState, fromState);\r\n  if (!toActivate.includes(toState.name)) {\r\n    toActivate.push(toState.name);\r\n  }\r\n\r\n  return toActivate.map(segment => getRoute(segment, routes));\r\n};\r\n\r\nexport const getRouterBasePrefix = (): string =>\r\n  process.env.REACT_APP_ROUTER_PREFIX || '/default-home-route';\r\n","import home from './home/route';\n\nexport default [home];\n","import { getRouterBasePrefix } from '@/services/router/_utils';\n\nexport default {\n  name: 'home',\n  path: getRouterBasePrefix(),\n  loadAction: () => import('./index'),\n};\n","import { Router } from 'router5';\r\nimport { getRoute } from '../_utils';\r\nimport { IActionResult } from '../_types';\r\n\r\nexport const getSegmentActionResult = (router: Router) => (\r\n  name: string,\r\n  nodeName = '',\r\n): IActionResult | null => {\r\n  const { routes } = router.getDependencies();\r\n  if (name === nodeName) return null;\r\n\r\n  const segments = name.split('.');\r\n  const nodeSegments = nodeName.split('.');\r\n\r\n  const depth = nodeName === '' ? 1 : nodeSegments.length + 1;\r\n\r\n  const segment = segments.slice(0, depth).join('.');\r\n  const route = getRoute(segment, routes);\r\n\r\n  return route.actionResult || null;\r\n};\r\n","import { Router } from 'router5';\r\nimport { IActionResult } from '../_types';\r\nimport { getRoute } from '../_utils';\r\n\r\nexport const getRouteActionResult = (router: Router) => (\r\n  name: string,\r\n): IActionResult | null => {\r\n  const { routes } = router.getDependencies();\r\n  const route = getRoute(name, routes);\r\n\r\n  return route.actionResult || null;\r\n};\r\n","import { Router, Middleware } from 'router5';\r\nimport promiseSequential from 'promise-sequential';\r\nimport { getActivatedRoutes } from '../_utils';\r\nimport {\r\n  IAdvancedRoute,\r\n  // IActionParams,\r\n  IAction,\r\n  IActionResult,\r\n} from '../_types';\r\n\r\ninterface IPromisesStack {\r\n  result: { (): Promise<any> }[];\r\n  parallelStack: { (): Promise<any> }[];\r\n}\r\n\r\nexport const actionHandler = (router: Router): Middleware => async (\r\n  toState: IAdvancedRoute,\r\n  fromState: IAdvancedRoute,\r\n): Promise<IActionResult> => {\r\n  const { routes, store } = router.getDependencies();\r\n\r\n  const actionParams: any = {\r\n    router,\r\n    toState,\r\n    fromState,\r\n    store,\r\n  };\r\n\r\n  let parentError = null;\r\n\r\n  const getHandler = (route: IAdvancedRoute) => {\r\n    return () => {\r\n      return new Promise((resolve, reject) => {\r\n        if (\r\n          route.actionResult &&\r\n          route.actionResult.useCache === true &&\r\n          !parentError &&\r\n          !route.actionResult.error\r\n        ) {\r\n          // Use cache\r\n          resolve(route);\r\n        } else if (parentError) {\r\n          // Parent has error\r\n          resolve(Object.assign(route, { actionResult: parentError }));\r\n        } else if (\r\n          typeof route.loadAction === 'function' ||\r\n          typeof route.action === 'function'\r\n        ) {\r\n          // Get action promise\r\n          let actionPromise: Promise<IAction>;\r\n          if (typeof route.loadAction === 'function') {\r\n            actionPromise = new Promise((resolveActionLoad): void => {\r\n              route\r\n                .loadAction()\r\n                .then((loaded: { default: IAction }): void => {\r\n                  resolveActionLoad(loaded.default);\r\n                })\r\n                .catch(reject);\r\n            });\r\n          } else {\r\n            actionPromise = Promise.resolve(route.action);\r\n          }\r\n          // Run action promise\r\n          actionPromise.then((action: IAction): void => {\r\n            action(actionParams)\r\n              .then(\r\n                (result: IActionResult): IAdvancedRoute => {\r\n                  if (result.error) {\r\n                    parentError = result.error;\r\n                    return Object.assign(route, {\r\n                      actionResult: result.error,\r\n                    });\r\n                  }\r\n                  return Object.assign(route, { actionResult: result });\r\n                },\r\n              )\r\n              .then(resolve)\r\n              .catch(reject);\r\n          });\r\n        } else {\r\n          // No action fallback\r\n          resolve(Object.assign(route, { actionResult: null }));\r\n        }\r\n      });\r\n    };\r\n  };\r\n\r\n  const activatedRoutes = getActivatedRoutes(toState, fromState, routes);\r\n\r\n  const { result } = activatedRoutes.reduce(\r\n    (\r\n      acc: IPromisesStack,\r\n      route: IAdvancedRoute,\r\n      index: number,\r\n      arr: IAdvancedRoute[],\r\n    ): IPromisesStack => {\r\n      const newAcc = {\r\n        result: [...acc.result],\r\n        parallelStack: [...acc.parallelStack],\r\n      };\r\n\r\n      if (route.canParallel) {\r\n        newAcc.parallelStack.push(getHandler(route));\r\n\r\n        if (index === arr.length - 1) {\r\n          const copiedParallelPromises = [...newAcc.parallelStack];\r\n          newAcc.result.push(() =>\r\n            Promise.all(\r\n              copiedParallelPromises.map(createPromise => createPromise()),\r\n            ),\r\n          );\r\n          newAcc.parallelStack = [];\r\n        }\r\n      } else {\r\n        if (newAcc.parallelStack.length > 0) {\r\n          const copiedParallelPromises = [...newAcc.parallelStack];\r\n          newAcc.result.push(() =>\r\n            Promise.all(\r\n              copiedParallelPromises.map(createPromise => createPromise()),\r\n            ),\r\n          );\r\n          newAcc.parallelStack = [];\r\n        }\r\n\r\n        newAcc.result.push(getHandler(route));\r\n      }\r\n\r\n      return newAcc;\r\n    },\r\n    {\r\n      result: [],\r\n      parallelStack: [],\r\n    },\r\n  );\r\n\r\n  return promiseSequential(result);\r\n};\r\n","import { State, Plugin } from 'router5';\r\n\r\nconst scrollStateMap = {};\r\n\r\nconst getScrollTop = (): number => {\r\n  if (document.documentElement && document.documentElement.scrollTop) {\r\n    return document.documentElement.scrollTop;\r\n  }\r\n  if (document.body) {\r\n    return document.body.scrollTop;\r\n  }\r\n  return 0;\r\n};\r\nconst setScrollTop = (value: number): void => {\r\n  if (document.documentElement && document.body) {\r\n    // eslint-disable-next-line no-multi-assign\r\n    document.documentElement.scrollTop = document.body.scrollTop = value;\r\n  }\r\n};\r\n\r\nconst generateScrollStateKey = (route: State): string => {\r\n  return route.name + JSON.stringify(route.params);\r\n};\r\n\r\nconst isIgnoreScrollRestore = (route: State): boolean => {\r\n  return (\r\n    route &&\r\n    route.meta &&\r\n    route.meta.options &&\r\n    route.meta.options.ignoreScrollRestore\r\n  );\r\n};\r\n\r\nexport const restoreScrollPosition = (): Plugin => ({\r\n  onTransitionStart: (toState: State, fromState: State): void => {\r\n    if (isIgnoreScrollRestore(fromState)) {\r\n      return;\r\n    }\r\n    if (fromState && fromState.meta) {\r\n      scrollStateMap[generateScrollStateKey(fromState)] = getScrollTop();\r\n    }\r\n  },\r\n\r\n  onTransitionSuccess: (toState: State): void => {\r\n    if (isIgnoreScrollRestore(toState)) {\r\n      return;\r\n    }\r\n\r\n    setTimeout((): void => {\r\n      if (\r\n        toState &&\r\n        toState.name &&\r\n        scrollStateMap[generateScrollStateKey(toState)]\r\n      ) {\r\n        setScrollTop(scrollStateMap[generateScrollStateKey(toState)]);\r\n      } else {\r\n        setScrollTop(0);\r\n      }\r\n    }, 1);\r\n  },\r\n});\r\n","import 'normalize.css';\nimport 'reset-css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createAppStore } from '@/services/redux/store';\nimport { App } from '@/_components/app';\nimport { configureRouter } from '@/services/router';\nimport '@/styles/global.css';\nimport '@/styles/font-imports.css';\n\nconst ROOT_ELEMENT = document.getElementById('root');\n\nconst router = configureRouter();\nconst store = createAppStore({ router });\n\nrouter.setDependencies({\n  store,\n});\n\nrouter.start(() => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App router={router} />\n    </Provider>,\n    ROOT_ELEMENT,\n  );\n});\n","import createRouter, { Router } from 'router5';\r\nimport loggerPlugin from 'router5-plugin-logger';\r\nimport browserPlugin from 'router5-plugin-browser';\r\nimport routes from '@/pages/routes';\r\nimport { getSegmentActionResult } from './dependencies/get-segment-action-result';\r\nimport { getRouteActionResult } from './dependencies/get-route-action-result';\r\nimport { actionHandler } from './middlewares/action-handler';\r\nimport { restoreScrollPosition } from './plugins/restore-scroll-position';\r\n\r\nexport const configureRouter = (): Router => {\r\n  const router = createRouter(routes, {\r\n    defaultRoute: 'home',\r\n    defaultParams: {},\r\n    allowNotFound: false,\r\n    caseSensitive: true,\r\n    queryParamsMode: 'loose',\r\n  });\r\n\r\n  // Dependencies\r\n  router.setDependencies({\r\n    routes,\r\n    getSegmentActionResult: getSegmentActionResult(router),\r\n    getRouteActionResult: getRouteActionResult(router),\r\n  });\r\n\r\n  // Middlewares\r\n  router.useMiddleware(actionHandler);\r\n\r\n  // Plugins\r\n  router.usePlugin(browserPlugin());\r\n  if (process.env.NODE_ENV === 'development') {\r\n    router.usePlugin(loggerPlugin);\r\n  }\r\n\r\n  router.usePlugin(restoreScrollPosition);\r\n\r\n  return router;\r\n};\r\n","import { applyMiddleware, createStore } from 'redux';\nimport { enableBatching, batchDispatchMiddleware } from 'redux-batched-actions';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { Router } from 'router5';\nimport { IAdvancedStore } from '../_types';\nimport { createReducer } from './create-reducer';\nimport { createRootSaga } from './root-saga';\n\nconst __DEV__ = process.env.NODE_ENV === \"development\"; // eslint-disable-line\n\ninterface IStoreParams {\n  router: Router;\n  rootReducers?: {\n    [key: string]: Function;\n  };\n  rootSagas?: Record<string, any>;\n}\n\nexport const createAppStore = ({\n  router,\n  rootReducers,\n  rootSagas,\n}: IStoreParams) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const composeMiddlewares = [batchDispatchMiddleware, sagaMiddleware];\n\n  const enhancers = __DEV__\n    ? composeWithDevTools({ shouldHotReload: false })(\n        applyMiddleware(...composeMiddlewares),\n      )\n    : applyMiddleware(...composeMiddlewares);\n\n  // создаем корневой редюсер прокидывая в него доп параметры\n  const rootReducer = createReducer({ asyncReducers: rootReducers });\n\n  const store: IAdvancedStore = createStore(\n    enableBatching(rootReducer),\n    enhancers,\n  ) as IAdvancedStore;\n\n  // вытаскиваем диспатч для корневый саги\n  const dispatch = store.dispatch;\n\n  // создаем корневую сагу прокидывая в нее доп параметры\n  const rootSaga = createRootSaga({\n    rootSagas,\n    router,\n    dispatch,\n  });\n\n  const rootSagaWithRouter = rootSaga.bind(null, { router, dispatch });\n\n  // прокидываем роутер в стор\n  store.router = router;\n  // создаем регистр динамических саг и редюсеров\n  store.asyncReducers = {};\n  store.asyncSagas = {};\n  // определяем по документации раннер миддливары внутри стора\n  store.sagaMiddleware = sagaMiddleware;\n\n  sagaMiddleware.run(rootSagaWithRouter);\n\n  // возвращаем обхект стора\n  return store;\n};\n","import { combineReducers } from '../_utils/combine-reducers';\nimport { rootReducers } from './root-reducers';\n\nexport const createReducer = ({\n  prevState = {},\n  asyncReducers,\n}: {\n  prevState?: any;\n  asyncReducers?: any;\n}) =>\n  combineReducers({\n    ...prevState,\n    ...asyncReducers,\n    ...rootReducers,\n  });\n","import { spawn, all } from 'redux-saga/effects';\nimport { Router } from 'router5';\nimport { Dispatch } from 'redux';\nimport { formManagerWatcherSaga } from '@/services/redux/root-modules/form-manager-module';\nimport { initLoadManagerWatcherSaga } from '@/services/redux/root-modules/init-load-manager-module';\nimport { redirectManagerWatcherSaga } from '@/services/redux/root-modules/redirect-manager-module';\nimport { requestExtraDataHandlerWatcherSaga } from '@/services/redux/root-modules/request-extra-data-handler-module';\n\ntype RootSagaParams = {\n  router: Router;\n  dispatch: Dispatch;\n  // todo fix type\n  rootSagas?: Record<string, any>;\n};\n\nexport const createRootSaga = ({\n  rootSagas = [],\n  router,\n  dispatch,\n}: RootSagaParams) =>\n  function* rootSaga() {\n    yield spawn(formManagerWatcherSaga);\n    yield spawn(initLoadManagerWatcherSaga);\n    yield spawn(requestExtraDataHandlerWatcherSaga);\n    yield spawn(redirectManagerWatcherSaga, { router, dispatch });\n\n    // run additional root sagas\n    yield all(\n      Object.values(rootSagas).map(saga => spawn(saga, { router, dispatch })),\n    );\n  };\n"],"sourceRoot":""}